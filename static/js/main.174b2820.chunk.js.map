{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","name","email","id","className","src","alt","CardList","robots","map","user","i","SearchBox","searchChange","placeholder","type","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","res","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById"],"mappings":"8LAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,oCCUCQ,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACxB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAA1B,aAAyCG,IAAI,KACrD,gCACI,oBAAIF,UAAU,MAAd,SAAqBH,IACrB,mBAAGG,UAAU,MAAb,SAAoBF,WCuBrBK,EA9BE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAahB,OACI,8BAEOA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACI,cAAC,EAAD,CAEIR,GAAIO,EAAKP,GACTF,KAAMS,EAAKT,KACXC,MAAOQ,EAAKR,OAHPQ,EAAKP,UCPnBS,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,8BACI,uBACIT,UAAU,iDACVU,YAAY,gBACZC,KAAK,SACLC,SAAUH,OCCXI,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKJ,EAAMK,YCoBJC,E,kDApBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,8DAQDC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACJ,8DAEJG,KAAKX,MAAMK,a,GAjBEQ,aCwDbC,E,kDAlDX,aAAe,IAAD,8BACV,gBAmBJC,eAAiB,SAACC,GAEd,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAnB1C,EAAKZ,MAAQ,CACTjB,OAAQ,GACR2B,YAAa,IALP,E,gEAUO,IAAD,OAEhBG,MAAM,8CACD5C,MAAK,SAAA6C,GAAG,OAAIA,EAAIC,UAChB9C,MAAK,SAAA+C,GAAK,OAAI,EAAKX,SAAS,CAACtB,OAAQiC,S,+BAWpC,IAAD,EACyBZ,KAAKJ,MAA5BjB,EADF,EACEA,OAAQ2B,EADV,EACUA,YAETO,EAAiBlC,EAAOmC,QAAO,SAAAC,GACjC,OAAOA,EAAM3C,KAAK4C,cAAcC,SAASX,EAAYU,kBAKzD,OAAQrC,EAAOuC,OAGP,sBAAK3C,UAAU,KAAf,UACI,oBAAIA,UAAU,SAAd,oBACI,cAAC,EAAD,CAAWS,aAAcgB,KAAKI,iBAClC,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUzB,OAAQkC,WAPlC,oBAAItC,UAAU,KAAd,yB,GApCM2B,a,YCClBiB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjD5D,M","file":"static/js/main.174b2820.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'; //Because we are writing JSX, we always need to import react in these files\r\n\r\n//Below we use the functional way of building a component instead of class-based\r\n//Note that we can only return ONE element, i.e. everything needs to be inside of one parent element - this used to mean we put everything in a div, but now we can use <React.Fragment></React.Fragment> or just <></>\r\n//Note that we can destructure props inside the function parameter field i.e. {name, email, id} in the parameter field is equivalent to const {name, email, id} = props;\r\nconst Card = ({name, email, id}) => { \r\n    return (\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\r\n            <img src={`https://robohash.org/${id}?set=set3`} alt='' />\r\n            <div>\r\n                <h2 className='ttu'>{name}</h2>\r\n                <p className='ttu'>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n//Note that default parameter is 'props' (we can call it whatever we want but it is the general object containing all of the props defined in the JSX) which means we have to destructure it in the param field (or use props.robots notation everywhere)\r\nconst CardList = ({ robots }) => {\r\n    //Below we create an array of Card elements by cycling through the robots array and storing their values in he JSX as shown. Note that we need to provide a 'key' for each Card element so that React can uniquely identify each one (we will get a warning if we omit it and React behaves more efficiently with the key)\r\n    //Ultimately we don't need to store the result of robots.map in a variable, we can put the code directly inside the div below inside {}\r\n    // const cardComponent = robots.map((user, i) => {\r\n    //     return (\r\n    //         <Card \r\n    //             key={i} \r\n    //             id={robots[i].id} \r\n    //             name={robots[i].name} \r\n    //             email={robots[i].email}\r\n    //         />);\r\n    // })\r\n\r\n    return (\r\n        <div>\r\n            {\r\n               robots.map((user, i) => {\r\n                return (\r\n                    <Card \r\n                        key={user.id} \r\n                        id={user.id} \r\n                        name={user.name} \r\n                        email={user.email}\r\n                    />);\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n//We destructure our searchChange function defined in App.js and pass it in as a parameter. It will be called when an onChange event (HTML event) occurs\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div>\r\n            <input \r\n                className='pa3 mb4 ba b--green bg-lightest-blue w5 br4 tc'\r\n                placeholder='Search RoBros'\r\n                type='search' \r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n//Below we create our Scroll component. We don't actually pass it any properties, but by default all props have a children field which will allow us to wrap other components and set those children of the Scroll component to a fixed position (basically anything we wrap in the Scroll tags <Scroll></Scroll>)\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid white', height: '550px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","//ErrorBoundary is a component we create solely to deal with errors in components. We define it here and then wrap whatever component we need error handling \r\n//Note that the results of this wont be visible in development mode (we want to see the errors, but in production mode the error is hidden and the h1 message is displayed)\r\n\r\nimport React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    //componentDidCatch is a built in react method for catching errors (error and info are default parameters which we can use if we want to)\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true});\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Ooops. Something went wrong.</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","//The App component will contain all of our other components\r\nimport React, { Component } from 'react';\r\nimport CardList from '../components/CardList'; //Instead of putting all cards in this file, we put them in CardList and import that\r\n//import { robots } from './robots'; //Note that in the robots file we don't use 'export default' which means we can export multiple files, which means we need to destructure to get the robots array - Note that we removed this file later in the course so we could use the API\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll'; //Scroll is a custom component we created that allows us to fixed position components on the screen as we scroll\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\n//Note that a component with state is called 'smart' and smart components tend to have the class syntax\r\n//Also keep in mind React lifecycle hooks i.e. what methods are called when an instance of a component is being created and inserted into the dom (mounting, updating, unmounting) - note that these methods run in a specific order\r\nclass App extends Component {\r\n    constructor() {\r\n        super(); //We have to call super() if we want to use 'this' in an extended class\r\n        //STATE is how we can dynamically communicate between our App and its components\r\n        this.state = {\r\n            robots: [], //Initially we set robots: robots but we are setting up to use an API so we use [] and set  robots after the component is mounted\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    //This is a built in React lifecycle hook that will run as soon as our component is mounted\r\n    componentDidMount() {\r\n        //This is a traditional way of making HTTP requests for resources (res is the response object)\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(res => res.json()) //We convert the response to JSON format (note we must return this)    \r\n            .then(users => this.setState({robots: users})); //Users is the res (response) in JSON format from the previous step. After we fetch the data we have to update the state of robots\r\n    }\r\n\r\n\r\n    //Defining our function that will deal with search input\r\n    //Note that when we make our on methods (functions) on components we need to use arrow notation if we want 'this' to refer to the component itself (and not the event, or whatever else)\r\n    onSearchChange = (event) => {\r\n        //To change the state on something in React we use the line below. This will update the searchfield with whatever the input is\r\n        this.setState({ searchfield: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        const {robots, searchfield} = this.state; //Robots and searchfield are STATES of the React App. This is important!\r\n        //Here we filter the robots array for items that contain the searchfield values\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        });\r\n\r\n        //The if statement below accounts for possibility of a delay due to a large robots array i.e. we show the 'LOADING' heading until the document is ready\r\n        //Note that we refactored this to use the ternary operator (it is a cleaner syntax for if else statements)\r\n        return !robots.length ? \r\n            <h1 className='tc'>LOADING</h1> :   \r\n            (\r\n                <div className='tc'>\r\n                    <h1 className='f1 pb2'>RoBros</h1>\r\n                        <SearchBox searchChange={this.onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots}/>\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'tachyons';//Tachyons is a CSS framework (similar to boostrap)\r\nimport App from './containers/App';\r\nimport './index.css';\r\nimport './containers/App.css';\r\n\r\n\r\n//The index.js file is where we add our components to the ReactDOM. Note that we can specify properties or 'props' inside our component, which we then have access to in the component file.\r\n//Note we create the property robots and assign our robots array to it\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
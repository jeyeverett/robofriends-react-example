{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","constants.js","components/Header.js","containers/App.js","actions.js","reducers.js","serviceWorker.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","name","email","id","className","src","alt","CardList","robots","console","log","map","user","i","SearchBox","searchChange","aria-label","placeholder","type","onChange","Scroll","props","style","overflowY","border","height","backgroundColor","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","Header","nextProps","nextState","App","onRequestRobots","searchfield","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","res","json","data","catch","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.661f17ac.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'; //Because we are writing JSX, we always need to import react in these files\r\n\r\n//Below we use the functional way of building a component instead of class-based\r\n//Note that we can only return ONE element, i.e. everything needs to be inside of one parent element - this used to mean we put everything in a div, but now we can use <React.Fragment></React.Fragment> or just <></>\r\n//Note that we can destructure props inside the function parameter field i.e. {name, email, id} in the parameter field is equivalent to const {name, email, id} = props;\r\nconst Card = ({name, email, id}) => { \r\n    return (\r\n        <div className='bg-green dib br3 pa4 ma2 grow bw2 shadow-5 tc'>\r\n            <img src={`https://robohash.org/${id}?size=200x200&set=set3`} alt='RoBro' />\r\n            <div>\r\n                <h2 className='ttu white f4'>{name}</h2>\r\n                <p className='ttu white i'>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n//Note that default parameter is 'props' (we can call it whatever we want but it is the general object containing all of the props defined in the JSX) which means we have to destructure it in the param field (or use props.robots notation everywhere)\r\nconst CardList = ({ robots }) => {\r\n    //Below we create an array of Card elements by cycling through the robots array and storing their values in he JSX as shown. Note that we need to provide a 'key' for each Card element so that React can uniquely identify each one (we will get a warning if we omit it)\r\n    //Ultimately we don't need to store the result of robots.map in a variable, we can put the code directly inside the div below inside {}\r\n    // const cardComponent = robots.map((user, i) => {\r\n    //     return (\r\n    //         <Card \r\n    //             key={i} \r\n    //             id={robots[i].id} \r\n    //             name={robots[i].name} \r\n    //             email={robots[i].email}\r\n    //         />);\r\n    // })\r\n    console.log('CardList');\r\n    return (\r\n        <div>\r\n            {\r\n               robots.map((user, i) => {\r\n                return (\r\n                    <Card \r\n                        key={i} \r\n                        id={robots[i].id} \r\n                        name={robots[i].name} \r\n                        email={robots[i].email}\r\n                    />);\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n//We destructure our searchChange function defined in App.js and pass it in as a parameter. It will be called when an onChange event (HTML event) occurs\r\nconst SearchBox = ({searchChange}) => {\r\n    console.log('SearchBox');\r\n    return (\r\n        <div>\r\n            <input \r\n                aria-label=\"Search Robros\"\r\n                className='pa3 mb3 br4 tc ba b--green bg-lightest-blue w5'\r\n                placeholder='Search RoBros'\r\n                type='search' \r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n//Below we create our Scroll component. We don't actually pass it any properties, but by default all props have a children field which will allow us to wrap other components and set those children of the Scroll component to a fixed position (basically anything we wrap in the Scroll tags <Scroll></Scroll>)\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid white', height: '500px', backgroundColor: 'white'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","//ErrorBoundary is a component we create solely to deal with errors in components. We define it here and then wrap whatever component we need error handling \r\n//Note that the results of this wont be visible in development mode (we want to see the errors, but in production mode the error is hidden and the h1 message is displayed)\r\n\r\nimport React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    //componentDidCatch is a build in react method for catching errors (error and info are default parameters which we can use if we want to)\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true});\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Ooops. Something went wrong.</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS ';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) { //This prevents the header from rerendering\r\n        return false;\r\n    }\r\n    render() {\r\n        console.log('Header');\r\n        return (\r\n            <div>\r\n                <h1 className='f1'>RoBros</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList'; //We imported all Cards into CardList and then imported that here\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll'; //Scroll is a custom component we created\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport { setSearchfield, requestRobots } from '../actions';\r\nimport Header from '../components/Header';\r\n\r\n//Note that a component with state is called 'smart' and smart components tend to have the class syntax\r\n//Also keep in mind React lifecycle hooks i.e. what methods are called when an instance of a component is being created and inserted into the dom (mounting, updating, unmounting) - note that these methods run in a specific order\r\n\r\n//Here we map searchfield (which is a property that will be changed in state by the reducer) to props (remember that props is something we have access to here in acomponent)\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchfield: state.searchRobots.searchfield,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\n//This function sends actions to the reducer\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchfield(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\nclass App extends Component {\r\n\r\n    //This is a built in React lifecycle hook that will run as soon as our component is mounted\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const { searchfield, onSearchChange, robots, isPending } = this.props;\r\n        //Here we filter the robots array for items that contain the searchfield values\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        });\r\n\r\n        //The if statement below accounts for possibility of a delay due to a large robots array i.e. we show the 'LOADING' heading until the document is ready\r\n        //Note that we refactored this to use the ternary operator (it is a cleaner syntax for if else statements)\r\n        return isPending ? \r\n            <h1 className='tc'>LOADING</h1> :   \r\n            (\r\n                <div className='tc'>\r\n                    <Header />\r\n                    <SearchBox searchChange={onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots}/>\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\n//If we didn't use connect, we would have to use the store 'subscribe' function for each component we wanted to link to the store. By using connect on App (a smart container), we link all components","import { \r\n    CHANGE_SEARCHFIELD, \r\n    REQUEST_ROBOTS_PENDING, \r\n    REQUEST_ROBOTS_SUCCESS, \r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchfield = (text) => ({\r\n    type: CHANGE_SEARCHFIELD,\r\n    payload: text\r\n});\r\n\r\n//The below function combined with its counter part (onRequestRobots: () => dispatch(requestRobots())) in App.js relies on the redux-thunk middleware\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(res => res.json())  \r\n            .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n            .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n}","import { \r\n    CHANGE_SEARCHFIELD, \r\n    REQUEST_ROBOTS_PENDING, \r\n    REQUEST_ROBOTS_SUCCESS, \r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\n\r\n//The 'reducer' creates the state for the store\r\nconst initialStateSearch = {\r\n    searchfield: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCHFIELD:\r\n            //Since we want to use pure functions, we return a new object (we don't modify the old one)\r\n            return { ...state,  searchfield: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    robots: []\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return { ...state,  isPending: true };\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return { ...state,  robots: action.payload, isPending: false };\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return { ...state,  error: action.payload, isPending: false };\r\n        default:\r\n            return state;\r\n    }\r\n}","const isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register () {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl)\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.')\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport default function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk'; //Allows us to make async fetch calls in redux\r\nimport { createLogger } from 'redux-logger'; //Logs state changes to the console\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'tachyons';//Tachyons is a CSS framework (similar to boostrap)\r\nimport App from './containers/App';\r\nimport './index.css';\r\nimport './containers/App.css';\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport * as registerServiceWorker from './serviceWorker';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\n//The index.js file is where we add our components to the ReactDOM. Note that we can specify properties or 'props' inside our component, which we then have access to in the component file.\r\n//Note we create the property robots and assign our robots array to it\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\nregisterServiceWorker.register();"],"sourceRoot":""}